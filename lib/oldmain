import 'dart:math';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_contacts/flutter_contacts.dart';
import 'package:flutter_sms/flutter_sms.dart';
import 'package:intl/intl.dart';

void main() async {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key}) : super(key: key);
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<Contact>? contacts;

  final random = Random();

  final formatter = DateFormat('dd/MM/yyyy');

  @override
  void initState() {
    super.initState();
    getContact();
  }

  void getContact() async {
    if (await FlutterContacts.requestPermission()) {
      contacts = await FlutterContacts.getContacts(
          withProperties: true, withPhoto: true);

      print("total contact ${contacts?.length}");

      setState(() {});
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: const Text(
            "Share TraitZ",
            style: TextStyle(color: Colors.white),
          ),
          centerTitle: true,
          backgroundColor: Colors.cyan,
          elevation: 0,
          leading: IconButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              icon: Icon(Icons.arrow_back_ios_new)),
        ),
        body: (contacts) == null
            ? Center(
                child: CircularProgressIndicator(
                strokeWidth: 10.0,
              ))
            : ListView.builder(
                itemCount: contacts!.length,
                itemBuilder: (BuildContext context, int index) {
                  Uint8List? image = contacts![index].photo;
                  String num = (contacts![index].phones.isNotEmpty)
                      ? (contacts![index].phones.first.number)
                      : "--";
                  return ListTile(
                      leading: (contacts![index].photo == null)
                          ? const CircleAvatar(child: Icon(Icons.person))
                          : CircleAvatar(backgroundImage: MemoryImage(image!)),
                      title: Text(
                          "${contacts![index].name.first} ${contacts![index].name.last}"),
                      subtitle: Text(num),
                      onTap: () async {
                        if (contacts![index].phones.isNotEmpty) {
                          // final sms = Uri.parse('sms:${contacts![index].phones[0]},${num2}?body=${msg}');

                          // final sms = Uri.parse(
                          //     'sms:${contacts![index].phones[0]}?body="Download TraitZ from TestFlight or Android Phone. Links: https://testflight.apple.com/join/LOXtw5WI"');
                          // if (await canLaunchUrl(sms)) {
                          //   await launchUrl(sms);
                          // } else {
                          //   throw 'Could not launch $sms';
                          // }

                          // launchUri('tel: ${num}');

                          String msg =
                              "Download TraitZ App from TestFlight. Link: https://testflight.apple.com/join/LOXtw5WI";

                          if (defaultTargetPlatform == TargetPlatform.android) {
                            msg =
                                "Download TraitZ App and Enjoy! Link: https://shorturl.at/FHLN4";
                          } else if (defaultTargetPlatform ==
                              TargetPlatform.iOS) {
                            msg =
                                "Download TraitZ from TestFlight. Links: https://testflight.apple.com/join/LOXtw5WI";
                          }

                          List<String> numbers = [
                            contacts![index].phones[0].number
                          ];

                          sending_SMS(msg, numbers);
                        }
                      });
                },
              ));
  }

  void sending_SMS(String msg, List<String> list_receipents) async {
    String send_result =
        await sendSMS(message: msg, recipients: list_receipents)
            .catchError((err) {
      print(err);
    });
    print(send_result);
  }
}
